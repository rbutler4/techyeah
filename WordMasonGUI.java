import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Nik
 */
public class WordMasonGUI extends javax.swing.JFrame implements KeyListener {
	
	private boolean DEBUG = true;
    private int wallHeight;	//current height of the word wall
    private JTextField[] wallFields;	//contains pointers to every level of the word wall text fields
    private String currBankLetters;	//internal representation of the current bank
    private String nextBankLetters;	//internal representation of the next bank
    private WordMasonClient CL;	
    private countdownThread CDT;
    private static String hostname = "";
    private static int port = -1;
	private int[] wordOwnership;	//contains owners of every level in the word wall: 0 
									//for this player, 1 for opponent, -1 for unowned
	private Color PLAYER_COLOR = new Color(0, 56, 186);
	private Color OPPONENT_COLOR = new Color(200, 0, 0);
	private Color NEUTRAL_COLOR = new Color(105, 105, 105);
	private Dimension LABEL_SIZE =  new Dimension(100, 17);	//attempt to enforce static component sizes in the layout
	private int myPowerup;	//currently-held powerup
	
    /**
     * Creates new form NumberAdditionGUI
     */
    public WordMasonGUI() {

        initComponents();
        
		//initialize wallFields
        wallFields = new JTextField[16];
        wallFields[0] = wallField1;
        wallFields[1] = wallField2;
        wallFields[2] = wallField3;
        wallFields[3] = wallField4;
        wallFields[4] = wallField5;
        wallFields[5] = wallField6;
        wallFields[6] = wallField7;
        wallFields[7] = wallField8;
        wallFields[8] = wallField9;
        wallFields[9] = wallField10;
        wallFields[10] = wallField11;
        wallFields[11] = wallField12;
        wallFields[12] = wallField13;
        wallFields[13] = wallField14;
        wallFields[14] = wallField15;
        wallFields[15] = wallField16;
        
		wordOwnership = new int[16];
     
        toggleGameState(false);
		
		//check if hostname/port arguments were passed on the command line
        if (port > 0 && !hostname.equals("")) {
			CL = new WordMasonClient(hostname, port);
		} else if (port > 0) {
            CL = new WordMasonClient(port);
        } else if (!hostname.equals("")) {
			CL = new WordMasonClient(hostname);
		} else {
			CL = new WordMasonClient();
		}
        CL.setGUI(this);    // lets WordMasonClient know to talk to this GUI
		this.getRootPane().setDefaultButton(submitButton);	//allows submission w/ enter key
		
		//add listeners to every selectable component
		inputField.addKeyListener(this);
		startQuitButton.addKeyListener(this);
		submitButton.addKeyListener(this);
		
		//initialize wordOwnership
		for (int i = 0; i < wallFields.length; i++) {
			wordOwnership[i] = -1;
        }
			
		this.setSize(new Dimension(375, 600));
		this.setResizable(false);
    }
   
   
    //Code generated by NetBeans
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        nextBankLabel = new javax.swing.JLabel();
        nextBank = new javax.swing.JLabel();
        playerTwoScoreLabel = new javax.swing.JLabel();
        playerOneScoreLabel = new javax.swing.JLabel();
        playerTwoScore = new javax.swing.JLabel();
        playerOneScore = new javax.swing.JLabel();
        playerOnePowerup = new javax.swing.JLabel();
        playerTwoPowerup = new javax.swing.JLabel();
		invalidLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        wallField16 = new javax.swing.JTextField();
        wallField15 = new javax.swing.JTextField();
        wallField14 = new javax.swing.JTextField();
        wallField13 = new javax.swing.JTextField();
        wallField12 = new javax.swing.JTextField();
        wallField11 = new javax.swing.JTextField();
        wallField10 = new javax.swing.JTextField();
        wallField9 = new javax.swing.JTextField();
        wallField8 = new javax.swing.JTextField();
        wallField7 = new javax.swing.JTextField();
        wallField6 = new javax.swing.JTextField();
        wallField5 = new javax.swing.JTextField();
        wallField4 = new javax.swing.JTextField();
        wallField3 = new javax.swing.JTextField();
        wallField2 = new javax.swing.JTextField();
        wallField1 = new javax.swing.JTextField();
        currBank = new javax.swing.JLabel();
        inputField = new javax.swing.JTextField();
        submitButton = new javax.swing.JButton();
        startQuitButton = new javax.swing.JButton();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nextBankLabel.setText("");

        nextBank.setText("");

        playerTwoScoreLabel.setText("<html> Opponent's <br> score </html>");

        playerOneScoreLabel.setText("<html> Your <br> score </html>");

        playerTwoScore.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        playerTwoScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playerTwoScore.setText("0");
		playerTwoScore.setPreferredSize(LABEL_SIZE);

        playerOneScore.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        playerOneScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playerOneScore.setText("0");
		playerOneScore.setPreferredSize(LABEL_SIZE);
		
		//invalidLabel.setPreferredSize(LABEL_SIZE);
		
		//playerOnePowerup.setFont(new java.awt.Font("Tahoma", 2, 14));
		//playerTwoPowerup.setFont(new java.awt.Font("Tahoma", 2, 14));

        wallField16.setEditable(false);
        wallField16.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField16.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField16.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField15.setEditable(false);
        wallField15.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField15.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField15.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField14.setEditable(false);
        wallField14.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField14.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField14.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField13.setEditable(false);
        wallField13.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField13.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField13.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField12.setEditable(false);
        wallField12.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField12.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField12.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField11.setEditable(false);
        wallField11.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField11.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField11.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField10.setEditable(false);
        wallField10.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField10.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField9.setEditable(false);
        wallField9.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField9.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField8.setEditable(false);
        wallField8.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField8.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField8.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField7.setEditable(false);
        wallField7.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField7.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField7.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField6.setEditable(false);
        wallField6.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField5.setEditable(false);
        wallField5.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField4.setEditable(false);
        wallField4.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField3.setEditable(false);
        wallField3.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField2.setEditable(false);
        wallField2.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        wallField1.setEditable(false);
        wallField1.setFont(new java.awt.Font("Verdana", 1, 11)); // NOI18N
        wallField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        wallField1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        currBank.setFont(new java.awt.Font("Verdana", 1, 13)); // NOI18N
        currBank.setText("");
        currBank.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(wallField16, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField15, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField14, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField13, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField12, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField11, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField10, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField9, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField8, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField7, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField6, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField5, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField4, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField3, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(wallField1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(currBank)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(currBank)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(wallField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(wallField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonPressed(evt);
            }
        });

        startQuitButton.setText("Start");
        startQuitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startQuitButtonPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playerOneScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(playerOneScore))	
							.addComponent(playerOnePowerup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playerTwoScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(playerTwoScore))
							.addComponent(playerTwoPowerup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nextBankLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nextBank))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startQuitButton)
                                .addGap(20, 20, 20)
								.addComponent(invalidLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
								//.addGap(20, 20, 20)
                                .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(submitButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextBankLabel)
                    .addComponent(nextBank))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(startQuitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(playerOneScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playerOneScore)
										.addGap(20, 20, 20)
										.addComponent(playerOnePowerup))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(playerTwoScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(playerTwoScore)
										.addGap(20, 20, 20)
										.addComponent(playerTwoPowerup)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGap(5, 5, 5)
							.addComponent(submitButton)
							.addComponent(invalidLabel)
							.addGap(5, 5, 5)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(inputField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

	/**
	 *	Name: resetGameBoard
	 *	Description: clears the letter banks, word wall, scores, and input field
	 */	
    private void resetGameBoard() {
		for (int i = 0; i < wallFields.length; i++) {
            wallFields[i].setText("");
			wordOwnership[i] = -1;
        }
		setPlayerOneScore(0);
		setPlayerTwoScore(0);
		playerOnePowerup.setText("");
		playerTwoPowerup.setText("");
		myPowerup = 0;
		wallHeight = 0;
		inputField.setText("");
		currBank.setText("");
		nextBank.setText("");
		nextBankLabel.setText("");
		CDT.interrupt();
	}

	/**
	 *	Name: startQuitButtonPressed
 	 *	Input: a JButton action event (button is clicked)
	 *	Description: if button reads "start", connects WordMasonClient to game server and enables game. 
	 *	If "quit", tells WordMasonClient to send server quit signal and disables game.
	 */    
    private void startQuitButtonPressed(java.awt.event.ActionEvent evt) {                                        
        String buttonText = startQuitButton.getText();
        if (buttonText.equals("Start")) {
            CL.connect();
            toggleGameState(true);
        } else {
            CL.update(4);
            toggleGameState(false);
			resetGameBoard();
        }
    }
	
	/**
	 *	Name: submitWord
	 *	Input: a string representing a player-entered word
	 *	Description: checks if word consists only of letters in the bank. If yes, passes the
	 *		word to the WordMasonClient for submission. If no, notifies the player that word is invalid.
	 */	
    private void submitWord(String word) {
        currBankLetters = currBankLetters.toUpperCase();
        word = word.toUpperCase();
        char[] bankChars = currBankLetters.toCharArray();
        char[] wordChars = word.toCharArray();
        int lettersUsed = 0;
		
		invalidLabel.setText("");
		//invalidLabel.setSize(LABEL_SIZE);

		
        for (int i = 0; i < bankChars.length; i++) {
            char bankLetter = bankChars[i];
            for(int j = 0; j < word.length(); j++) {
                char wordLetter = wordChars[j];
                if (bankLetter != ' ' && bankLetter == wordLetter) {
                    bankChars[i] = ' ';
                    wordChars[j] = ' ';
                    lettersUsed++;
                    break;
                }
            }
        }
        
        if (lettersUsed == word.length()) {
			word = word.toLowerCase();
            CL.word(word);
        } else {
			invalid();
		}
		inputField.setText("");

        //addWord(word);
      
    }
    
	//Name: invalid
	//Description: activates the invalid label
	private void invalid() {
		invalidLabel.setText("Invalid");
	}
	
	/**
	 *	Name: submitButtonPressed
	 *	Input: a JButton action event (button is pressed)
	 *	Description: calls submitWord with the current input string
	 */
    private void submitButtonPressed(java.awt.event.ActionEvent evt) {                                     
        String word = inputField.getText();
        submitWord(word);
    }                                    

	/**
	 *	Name: setBank
	 *	Input: the letters to be used in the bank
	 *	Description: sets the current letter bank to the input string
	 */	
    public void setBank(String letters) {
        currBankLetters = letters.toUpperCase();
        currBank.setText(currBankLetters);
    }
    
	/**
	 *	Name: setNextBank
	 *	Input: the letters to be used in the next bank
	 *	Description: sets the next letter bank to the input string
	 */
    public void setNextBank(String letters) {
        nextBankLetters = letters.toUpperCase();
		nextBank.setText(nextBankLetters);
		//CDT.interrupt();
		CDT = new countdownThread(20, this);
		CDT.start();
    }
    
	//Name: setNextBankTimer
	//Input: an integer representing number of seconds left
	//Description: updates the timer in nextBank. Called by countdownThread every second.
	public void setNextBankTimer(int time) {
		nextBankLabel.setText("Next bank in " + time + " seconds: ");
	}
	
	/**
	 *	Name: setPlayerOneScore
	 *	Input: the score to be set
	 *	Description: updates the player's score as represented in the GUI
	 */
    public void setPlayerOneScore(int score) {
        playerOneScore.setText(Integer.toString(score));
    }
    
	
	/**
	 *	Name: setPlayerTwoScore
	 *	Input: the score to be set
	 *	Description: updates the opponent's score as represented in the GUI
	 */
    public void setPlayerTwoScore(int score) {
        playerTwoScore.setText(Integer.toString(score));
    }
    
	//Name: setPlayerOnePowerup
	//Input: powerup flag
	//Description: sets the powerup label for player one
	public void setPlayerOnePowerup(int powerup) {
		String pwpName = "";
		System.out.println((DEBUG)?"Setting my powerup: "+powerup:"");
		switch (powerup) {
			case 1:
				pwpName = "<html>Wrecking<br>Ball</html>";
				break;
			case 2: 
				pwpName = "Chisel";
				break;
			case 3: 
				pwpName = "<html>Mortar<br>Thief</html>";
				break;
		}
		playerOnePowerup.setText(pwpName);
		myPowerup = powerup;
	}
	
	//Name: setPlayerTwoPowerup
	//Input: powerup flag
	//Description: sets the powerup label for player two
	public void setPlayerTwoPowerup(int powerup) {
		String pwpName = "";
		System.out.println((DEBUG)?"Setting opponent's powerup: "+powerup:"");
		switch (powerup) {
			case 1:
				pwpName = "<html>Wrecking<br>Ball</html>";
				break;
			case 2: 
				pwpName = "Chisel";
				break;
			case 3: 
				pwpName = "<html>Mortar<br>Thief</html>";
				break;
		}
		playerTwoPowerup.setText(pwpName);
	}
	
	//Name: setOwner
	//Input: owner code (0 for this player, 1 for opponent)
	//Description: sets the owner of the top of the wall
	public void setOwner(int owner) {
		wordOwnership[wallHeight] = owner;
		System.out.println((DEBUG)?"Setting "+owner+" as owner of level " +wallHeight:"");
	}
	
	/**
	 *	Name: addWord
	 *	Input: the word to be added
	 *	Description: adds a word to the lowest unused level of the word wall, and removes
	 *		the letters in that word from the current bank
	 */
    public void addWord(String word) {
		JTextField currLevel = wallFields[wallHeight];
        currLevel.setText(word);
		if (wordOwnership[wallHeight] == 0) {
			currLevel.setForeground(PLAYER_COLOR);
		} else {
			currLevel.setForeground(OPPONENT_COLOR);
		}
        wallHeight++;
        
		//remove this word's letters from the bank
        currBankLetters = currBankLetters.toUpperCase();
        word = word.toUpperCase();
        char[] bankChars = currBankLetters.toCharArray();
        char[] wordChars = word.toCharArray();
        for (int i = 0; i < bankChars.length; i++) {
            char bankLetter = bankChars[i];
            for(int j = 0; j < word.length(); j++) {
                char wordLetter = wordChars[j];
                if (bankLetter != ' ' && bankLetter == wordLetter) {
                    bankChars[i] = ' ';
                    wordChars[j] = ' ';
                    break;
                }
            }
        }
        setBank(String.valueOf(bankChars));
    }
    
	/**
	 *	Name: timeOutDialog()
	 *	Description: displays a dialog box that informs the user of a connection timeout
	 */
    public void timeOutDialog() {
        JFrame frame = new JFrame();
        JOptionPane.showMessageDialog(frame, "Connection timed out.");
        toggleGameState(false);
        resetGameBoard();
    }
    
	/**
	 *	Name: gameOverDialog()
	 *	Description: displays a dialog box that informs the user of game end. Disables and
	 *		resets the game board.
	 */
    public void gameOverDialog() {
        JFrame frame = new JFrame();
        JOptionPane.showMessageDialog(frame, "Game over!");
        toggleGameState(false);
		resetGameBoard();
    }
    
	/**
	 *	Name: toggleGameState
	 *	Input: true for enable, false for disable
	 *	Description: enables or disables the game board. Sets start/quit button text to
	 *		"start" while disabled, "quit" while enabled.
	 */
    private void toggleGameState(boolean toggle) {
        submitButton.setEnabled(toggle);
        inputField.setEnabled(toggle);
        
        for (int i = 0; i < wallFields.length; i++) {
            wallFields[i].setEnabled(toggle);
        }
        if (toggle == true) {
            startQuitButton.setText("Quit");
        } else {
            startQuitButton.setText("Start");
        }
    }
	
	//Name: powerupUsed
	//Input: powerup, user flags 
	//Description: handles GUI display of powerup effects
	public void powerupUsed(int powerup, int user) {
		//clear the powerup
		if (user == 0) {
			myPowerup = 0;
			clearP1Powerup();
		} else {
			clearP2Powerup();
		}
		
		//choose the appropriate method
		switch (powerup) {
			case 1:
				wreckingBall();
				break;
			case 2:
				chisel(user);
				break;
			case 3:
				thief(user);
				break;
		}
	}
	
	//Name: clearP1Powerup
	//Description: clears the player one powerup label
	private void clearP1Powerup() {
		playerOnePowerup.setText("");
	}

	//Name: clearP2Powerup
	//Description: clears the player two powerup label
	private void clearP2Powerup() {
		playerTwoPowerup.setText("");
	}	
	
	//Name: wreckingBall
	//Description: clears the top two wallFields and updates wallHeight 
	private void wreckingBall() {
		for (int i = 2; i > 0; i--) {
			if (wallHeight > 0) {	//don't clear past the bottom
				wallHeight--;
				wallFields[wallHeight].setText("");
				wordOwnership[wallHeight] = -1;
			}
		}
	}
	
	//Name: chisel
	//Description: changes the most recent word by the specified user's opponent to the neutral color
	private void chisel(int user) {
		//iterate through ownership array most -> least recent, identifying first word
		//owned by powerup user's opponent
		for (int i = wallHeight - 1; i >= 0; i--) {
			int owner = wordOwnership[i];
			System.out.println((DEBUG)?"Comparing user "+user+" with owner "+owner+" at height "+i:"");
			if (owner != user && owner >= 0) {	//check if word is not the user's or neutral
				wallFields[i].setForeground(NEUTRAL_COLOR);
				wordOwnership[i] = -1;
				break;
			}
		}
	}
	
	//Name: thief
	//Description: changes the most recent word by the specified user's opponent to the user's color
	private void thief(int user) {
		Color newColor;
		if (user == 0) {
			newColor = PLAYER_COLOR;
		} else {
			newColor = OPPONENT_COLOR;
		}
		//iterate through ownership array most -> least recent, identifying first word
		//owned by powerup user's opponent
		for (int i = wallHeight - 1; i >= 0; i--) {
			int owner = wordOwnership[i];
			System.out.println((DEBUG)?"Comparing user "+user+" with owner "+owner+" at height "+i:"");
			if (owner != user && owner >= 0) {	//check if word is not the user's or neutral
				wallFields[i].setForeground(newColor);
				wordOwnership[i] = user;
				break;
			}
		}
	}
	
	//Overrides KeyListener method (unused)
	public void keyPressed(KeyEvent e) {		
	}
	
	//Overrides KeyListener method (unused)
	public void keyTyped(KeyEvent e) {
	}
	
	//Name: keyReleased
	//Description: if F1 has been typed, send a signal through the WordMasonClient and 
	//relinquish the powerup. Does nothing if no powerup is possessed.
	public void keyReleased(KeyEvent e) {
		
		if (e.getKeyCode() == KeyEvent.VK_F1) {
			CL.update(myPowerup);
		}
	}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WordMasonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WordMasonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WordMasonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WordMasonGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //Set host/port variables
        int numArgs = args.length;
        if (numArgs > 0) {
            Pattern p = Pattern.compile("\\d*");	// any number of digits
            Matcher m;
            for(int i = 0; i < args.length; i++) {
                m = p.matcher(args[i]);
                if (m.matches()) {
                    port = Integer.parseInt(args[i]);
                } else {
                    hostname = args[i];
                }
            }
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WordMasonGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel currBank;
    private javax.swing.JTextField inputField;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel nextBank;
    private javax.swing.JLabel nextBankLabel;
    private javax.swing.JLabel playerOneScore;
    private javax.swing.JLabel playerOneScoreLabel;
    private javax.swing.JLabel playerTwoScore;
    private javax.swing.JLabel playerTwoScoreLabel;
    private javax.swing.JLabel playerOnePowerup;
    private javax.swing.JLabel playerTwoPowerup;
    private javax.swing.JLabel invalidLabel;
    private javax.swing.JButton startQuitButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JTextField wallField1;
    private javax.swing.JTextField wallField10;
    private javax.swing.JTextField wallField11;
    private javax.swing.JTextField wallField12;
    private javax.swing.JTextField wallField13;
    private javax.swing.JTextField wallField14;
    private javax.swing.JTextField wallField15;
    private javax.swing.JTextField wallField16;
    private javax.swing.JTextField wallField2;
    private javax.swing.JTextField wallField3;
    private javax.swing.JTextField wallField4;
    private javax.swing.JTextField wallField5;
    private javax.swing.JTextField wallField6;
    private javax.swing.JTextField wallField7;
    private javax.swing.JTextField wallField8;
    private javax.swing.JTextField wallField9;
    // End of variables declaration                   
}

class countdownThread extends Thread {
	int timer = 0;
	WordMasonGUI parent;
	
	public countdownThread(int timer, WordMasonGUI parent){
		this.timer = timer;
		this.parent = parent;
	}
	
	public void run() {
		for(int i = timer; i >= 0; i--) {
			parent.setNextBankTimer(i);
			try {
				Thread.sleep(1000);
			} catch (InterruptedException err) {
				break;
			}			
		}
	}
}
